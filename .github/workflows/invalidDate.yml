name: choose-page-tests

on:
  workflow_dispatch:
    inputs:
      page:
        description: "Select page"
        type: choice
        options:
          - login
          - inventory
          - cart
          - checkout
          - smoke
          - regression


jobs:
  set-time-stamps:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestampid.outputs.timestamp }}

    steps:
      # We want a unique identifier to be used when we create subdirectories for our github pages with reports
      - name: Set a timestamp
        id: timestampid
        # this will store current time with UTC in outputs.timestamp (eg of value: 20231028_233147Z)
        run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT"
      - name: Get Moldova timestamp
        id: moldova_time
        run: echo "timestamp=$(TZ='Europe/Chisinau' date '+%Y-%m-%d %H:%M:%S %Z')" >> "$GITHUB_OUTPUT"


  run-playwright-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

     


      - name: Run Playwright tests for selected page
        run: |
          echo "Testing page: ${{ github.event.inputs.page }}"
          npx playwright test --grep @${{ github.event.inputs.page }} --project=chromium
      
      - name: Upload blob report to GitHub Actions Artifacts
        if: always()
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: all-blob-reports
          path: blob-report
          retention-days: 14
  
  merge-reports-and-upload:
    # Merge reports after playwright tests, even if some shards have failed
    if: always()
    needs: [run-playwright-tests]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci

      # we now download the reports uploaded previously to merge them and create one single html report
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          name: all-blob-reports # name of the file stored as artifact (as uploaded at the previous job)
          path: all-blob-reports # name of the folder where the download will be saved

      # Playwright will generate a report and store it inside a folder called '/playwright-report'
      - name: Merge the blobs into one single HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload full html report to artifacts for history
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ steps.timestampid.outputs.timestamp }}
          path: playwright-report
          retention-days: 14

      - name: Push the new files to github pages
        # This will create a separate branch called gh-pages where it will store only reports. And from where it will push all future changes
        # to github pages. Having a separate branch will keep the reports and changes commits separate to your main/master
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./playwright-report # from what folder to take files. It takes only contents
          destination_dir: ${{ steps.timestampid.outputs.timestamp }} # a sub-directory where to publish to avoid overwriting other reports

      - name: Write URL in summary
        run: echo "### Test results (link available after 20 secs) - https://${{ github.repository_owner }}.github.io/Project-2/${{ steps.timestampid.outputs.timestamp }}/" >> $GITHUB_STEP_SUMMARY







  send-message-to-chats:
    if: always()
    needs: [run-playwright-tests]
    runs-on: ubuntu-latest
    steps:
      
      

      - name: Send Inline Telegram Message
        uses: appleboy/telegram-action@master
        with:
           to: ${{ secrets.TELEGRAM_TO }}
           token: ${{ secrets.TELEGRAM_TOKEN }}
           message: |
             ðŸš€ New commit by: ${{ github.actor }}
             ðŸ“‚ Repository: ${{ github.repository }}
             ðŸ”— Report: https://${{ github.repository_owner }}.github.io/Project-2/${{ steps.timestampid.outputs.timestamp }}
             ðŸ•’ Time: ${{ job.set-time-stamps.moldova_time.outputs.timestamp }}

      - name: Send a request to webhook
        run: |
          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d '{
            "username": "GitHub",
            "content": "@everyone",
            "embeds": [
              {
                "type": "rich",
                "title": "ðŸš€ New commit by: ${{ github.actor }}",
                "description": "**ðŸ“‚ Repository:** ${{ github.repository }}\n**ðŸ”— Raport:** https://${{ github.repository_owner }}.github.io/Project-2/${{ steps.timestampid.outputs.timestamp }}\n**ðŸ•’ Time:** ${{ steps.moldova_time.outputs.timestamp }}",
                "color": 2123412,
                "author": {
                  "name": "${{ github.actor }}",
                  "url": "https://github.com/${{ github.actor }}",
                  "icon_url": "https://avatars.githubusercontent.com/u/${{ github.actor }}?v=4"
                }
              }
            ]
          }' "${{ secrets.WEBHOOK_URL }}")
          echo "Webhook server response: $RESPONSE"

  